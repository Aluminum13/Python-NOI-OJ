print("Hello, World!")

"""
如果要问对新学编程有什么建议，那我有三条想说：学的时候多写，不会的时候多查，不理解的时候多试。
绝大多数人觉得编程难无非就是没有做到上面三点。尤其是没有建立起去查，去试的习惯。
很多刚学编程的人寄希望于有一个教程，或者一个网课能解决他们的问题，这多半是会失败的。
编程是一个无比庞大的系统，他太复杂了，以至于即便一本教程再厚，也远远不足以涵盖所有读者可能关心的问题。
所以读者经常会一边抱怨这本书怎么什么傻逼玩意都讲，一边又抱怨怎么什么都没讲清楚。
大部分人在学习编程的初级阶段，对编程的理解都其实是基于一系列的巧合和直觉上的。
这些直觉和巧合当然有时候会失效，但是为了这种风险去把教程编写的又大又全，代价太大了。
所以我和许多在编程方面有所建树的朋友（他们中有不少如今在大厂工作），基本达成了共识——
学习编程最好的办法就是，拿着一本薄薄的语法字典（最厚不要超过《菜鸟教程》），开始做题或者直接上手做工程。
然后自己去搜每一个想要弄得更清楚的地方，每一个自己需要用到，字典里又没有提到的东西。
而且，现在我们迎来了好时代！chatGPT会帮到你的。我发自内心的觉得每个人都值得好好学习怎么用chatGPT。
"""

"""
另外，这道题的通过率其实没有那么高！我已经见过数不清的人拿着各式各样的结果来问我为什么错了，没错啊。
我觉得他们多少应该通过这道题对计算机的死板长长记性——只有Hello, World!是对的
Hello,World!  Hello World!  hello, world!  Hello, World  "Hello, World!"……
都是错的！
借此机会给各位一个忠告——无论你对自己多么自信，在自己的电脑上看起来结果多么正确，都请你不辞辛苦上OJ测试一下，经常会有惊喜哦。
"""

"""
还有，大家都说python比C慢，比C占空间，有的人可能不信。
这里有一个直观的展示方式——你可以看一眼题目的”统计“栏，那里能看到你的具体得分（每个测试数据线性算分），以及用时，占用内存。
不妨和用GCC，G++的那些（绝大部分）对比一下。
"""