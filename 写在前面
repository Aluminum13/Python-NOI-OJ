我很不要脸地把这个部分起名叫：“银河系漫游指南”。此外，他真的仿佛有小说那么长，我废话真多（）
这里记录的是一些我对编程学习的整体性建议，和一些相关的人生感悟，其实完全可以不看。
（update：最近在组会做了一个报告，其中一部分内容就是介绍如何编程，为此我重新整理了这部分内容
或许变得更值得一看了，大家可以大致看一眼每点的内容来决定要不要细看。）

不过有一点很重要：如果有任何问题，可以直接在issue提交。如果认识我本人，欢迎随时用各种渠道直接问我。
（不过我未必能回答得很好，这就是另一件事了）
不用担心打扰，只要我还活着，我很乐意，很想回答你们的每一个问题。

那么，让我们开始。


1. Don't Panic
“事实上，它可能是小熊星座那些伟大的出版公司所出版过的最非凡的书了——
当然，这些公司也没有任何—个地球人听说过。但是，在银河系东部外缘的许多更加开放的文明里，
《银河系漫游指南》已经取代伟大的《银河系百科全书》成为所有知识和智慧的标准。
这是因为，尽管显得冗长，并且包含许多虚假或者至少是不够准确的信息，
但它却在两个极其重要的方面超越了那部更加陈旧和呆板的著作。
第一，它稍微便宜一点儿；
第二，在它的封面上以大而友善的字体写着“不要恐慌”这句话。”
	——《银河系漫游指南》道格拉斯·亚当斯

这就是我自比银河系漫游指南的自信——我完全做到了这两点。
第一，本教程当然是免费的。
第二，作为教程的最开始，我正在写一段很贴心的话来试图让你不要恐慌。

某年某月某日的凌晨十二点多，我在从地铁站跑回学校的路上被一对中年夫妇拦下来了。
他们看起来年纪很大，妈妈拖着行李箱，爸爸推着共享单车，单车上载着只有几岁大的孩子。他们问我XX怎么走，是这个方向吗。
老实说我不知道这个地方，所以用导航查了一下。然后指着面前说，是的，就是这个方向直走。
我看了看他们风尘仆仆的样子，补充道：还有两公里。他们笑着说，谢谢你啊，是这个方向就行，我们怕走反了。
这个时候已经很晚了，地方也很偏僻，路上没有一个行人，也肯定找不到公交车。
综合他们现在的位置和当时可选的交通方式，我猜他们是坐地铁到了二号线的终点站，这样一算他们也已经沿路走了二十分钟了。
我相信他们在出发的时候肯定是有把握的，绝不是漫无目的地找了这么远。要么是问了别人，要么是他们会用导航。
我也相信沿着主干道一直走不是一条难记的路线。但也许是半夜，昏昏欲睡的孩子让他们承担不起走错的代价。
也许是因为目的地实在太远，走了这么久，连出现在地平线上的迹象都没有。
他们还是一点点变得手足无措，东张西望，好不容易才拦到了一个可以帮他们指路的人。

我又想起来早两年遇到的另一件事，一辆装满西瓜的拖车停在路边，壮年的儿子站在车上负责挑瓜和把瓜递下来，年迈的父亲负责上秤收钱。
他们用的是电子秤，由于只卖一种瓜，早就已经把价格设置好，把西瓜往上一摆，左边的窗口显示重量，右边的窗口显示价格。
但是每卖一个瓜，父亲都要喊自己的儿子，问他是不是收这么多钱。儿子则从车上跳下来，看一眼，然后说：是的。
然后再爬回车上接着挑下一个。
如果他不会看电子称，这件事可能稍微好理解一些。但是他会看，他只是不相信。

人真的好脆弱，脆弱到没办法相信自己的判断，没办法相信自己的理解。
哪怕是像有没有走反，电子秤的示数这样再简单明白不过的问题，也需要反复确认。
甚至自己确认都没有用，要找一个比自己更值得信任得多的人来确认。

在当天的日记里我这样写道：
我也许既认得路，又认得西瓜的价格，但我又比他们好多少呢。
我还是有太多其他不值得一问的问题了，有时候我自己也知道别人会怎么回答，我只能讪笑着说：“你说得对。”

我觉得学习编程也是这样，编程其实是一个很多人刚开始学的时候都觉得很难，
但是等到入门以后会百思不得其解当年为什么会觉得这个东西难的东西。（至少难点完全不在一开始感到难的地方）
大部分时候我们的主要障碍可能其实是缺乏信念。人太容易缺乏信念了，尤其是在一个完全陌生，又看起来好像很厉害的领域。
而一旦缺乏信念就会采取全面保守的姿态，变得连电子秤都不会看了。
我知道只是这样说没什么用，但是自信一点吧，至少达到完成本教程的程度，绝大多数人应该是轻轻松松。
毕竟当年我和其他小伙伴学编程的时候只是小学，而且也不是什么厉害的小学，更不是什么层层筛选出来的精英。
编程兴趣班只是一个普通的兴趣班而已，不如说，其实学习好的大部分都去数学奥赛兴趣班了（乐）
这么说起来，说不定当年我们那批小学生学得那么快，也是因为我们对生活中的一切都没有那么丰富的外延认知。
当时我们的经验还不足以让我们在开始之前就对什么东西畏难。
也就是俗称的“初生牛犊不怕虎”吧。
那么总而言之，Don't Panic。本教程值得你Don't Panic，学编程需要你Don't Panic。


2.没有一本书，一门课能教会你python
编程语言（注意我这里用的是编程语言）是一门语言，如果了解这一点，自然就能推出很多理所当然的结论。
大家应该都至少有学习母语和一门第二语言的经验。大家掏心窝子讲，能有一本书，或者一门课（几十个课时）能教会人一门语言吗。

当然不可能，语言本身不是一门有主线的，有中心基础的学科（虽然语言学是）。
别的学科教材纵使挂一漏万，但他们都能抓住一些基本的东西。
要么抓住了主线，比如社会心理学可能会把主要的研究方向和主要的理论和流派大致介绍一通。
要么抓住了基础，比如力学可能会把牛顿力学定律和他延伸出来的几个主干命题讲清楚。

但语言天然更不适合这样。

当然编程语言不那么是典型的语言，他有很多良好的特性，比如足够少的常见关键字。
这导致很多教程就以这些关键字为主线展开，成功在一本书，一门课以内教会了你编程。本质上是一种带你背字典。
但我觉得编程不仅仅是这样，尤其是python。
python好在哪？市面上有很多说法，但我觉得最重要的是这个：
用的人多（一开始为什么发家的是另一个问题）
Minecraft 1.5.2，1.7.2等远古版本为什么至今还源源不断地有人玩。
只是因为这个版本玩的人多，所以有人为这个版本做mod，有更多mod就吸引更多人玩，有更多人玩就吸引更多人做mod……
python也是一样，它最大的优势就是足够多的人用，所以有足够多的轮子可以用（黑话，意为足够多的代码可以抄）
就算python本身不擅长做某事，因为用的人够多，所以有足够多的人面临这个问题，就会有足够多的大佬来解决这个问题。
那么说白了，用python和玩MC的某些远古版本一样，大家都是冲着mod来的，一直介绍原版算什么事呢。
但是难道要把所有你可能感兴趣的mod也全都介绍一遍吗，真当是编字典呢。
这就是为什么很多教材让你一边抱怨怎么什么傻逼玩意都讲，一边让你抱怨怎么都这样了还什么都没讲清楚。因为字典是这样的。

所以本教程主要旨在引导你学习冰山一角的一点知识（当然包括python本体的主干语法），从中抓住一些什么。
让你能够知道如何正确地面对和处理其他的部分，这样你能在需要的时候，很快学会他们的基本内容，并且注意到足够多应该注意到的东西。

当然，从背字典的角度，在此之余，你也能“学会”python。
而且确实，剩下的那些大佬写的轮子，无非也是用这些东西写出来的。接下来你只是要熟练使用他们。
就像MineCraft里面，只用红石，红石中继器，红石比较器三个游戏道具，再加上对他们的深度理解和亿点点堆量，
就可以在游戏里复现一台功能完备的计算机，还能在里面编程。
所以你也确实“学会”了，因为剩下来的东西大部分都可以用你已知的知识复现。之所以你还要去学只是因为你想偷懒（x）

对了，因为最近听说了一个故事所以补充一下。虽然我说这是一门语言，但也请不要把学习语言的所有经验都迁移过来（
尤其是那些主要目的是应试的经验。
比如不要抄代码！背代码！真的不要，拜托拜托！这样学是彻底走上邪路了！
你可能需要记忆的只是关键字的含义和用法。请确保自己写的所有程序都是自己在实践中把这些关键字组合出来的产物。
如果你要用别人的程序，可以直接copy。我们开源精神是鼓励大家这样做的，即所谓“不要重复发明/造轮子”。
但不是靠背！如果你觉得copy没有理解，那就深入理解他的思想和算法，自己复现，而不是背！
如果再看到手抄代码本我真的会脑溢血（


3.学习语言从理解基本表意单元开始
学语文要先认字，学英语要先背单词。这件事说出来一文不值，但不知道为什么到了学编程就有人会忘。
当你拿到一个程序的时候，你应该把它拆分成每一个基本表意单元，分别确保自己理解清楚了。
例如C语言的语句：
scanf("%d", &a)
他的基本表意单元有哪些呢，至少有scanf(), "", %, &, d, a。
他们任何一个再拆分都会变成没有意义的东西，或者单独存在的意义和这个具体组合无关的东西。比如scanf()不能拆成sc和anf()
你至少应该去理解以上六个部分每一个部分分别是什么意思，而不是只理解到：“这句话的意思是读取了一个整数并存到a变量”就到此为止了。
当然，你也可以慢慢来，比如暂时可以把%d, &a作为整体来理解。因为他们可能确实更像是一个字/一个单词，而分开理解更像是理解词根词缀/部首偏旁。
但是总之要有这样的意识，尽可能去根据独立的表意功能拆分，确保你理解清楚了每一个部件。只有这样你才能够灵活利用这些部件组成你想要的东西。
如果这不是你第一次学习一门编程语言，那你很可能已经在不强调这一点的教材那里养成了很坏的习惯。
也可能你已经随着水平的提高，自然地在处理一个又一个新问题的过程中理解了他们分别的含义。那是很好的。


4.底层化你的认知水平
很多人反映初学编程会有一个“开窍”的过程。那么“开窍”到底是开在哪呢。
让我们从分析这样一个例子开始：
你正在一个游乐场里愉快的玩耍，突然内急发作，但是这个天杀的游乐场居然没有指示牌！
为了简化问题我们假设这个游乐场的地图是“树状”的——也就是像树枝一样分叉，主干道分出支道，支道互相不连通。
你要怎么找厕所呢。

大多数人：“就一直走，沿路找呗。”

有的人：“沿着一条路一直走，每遇到岔路都选择右边的那条路，如果走到尽头还没找到厕所就往回走，
如果回到的岔路口还有别的岔路没走过，就在剩下的里面选择最右的，如果没有了就接着往回走。”（优先往右只是一个例子，其实可以任意顺序）

如果还能注意到有一些决策逻辑是等价的，在简并逻辑后：
1.在第一次到达一个岔路口的时候进行初始化：建立一个顺序（比如向右优先）并把往回走放在最后。
2.每次到达岔路口都按顺序走下一条路。

这就是深度优先搜索（Depth First Search，DFS）算法。
如果你平时就是这么分析问题的，那写一个深搜非常简单，是纯粹的翻译题（把逻辑翻译成语句就行）。
但是大多数人的认知层次远远没有达到能直接翻译成程序的层次。
当然这是很正常的，因为以我们日常生活而言，这样思考问题在很多方面是并不“经济的”。每个人会根据自己的经验选择更合适的认知层次。
但是总之，为了学习编程，你可能需要，至少在编程的时候，进入这样的认知水平状态。


5.三多
众所周知，说话比较有水平的人（比如领导）都喜欢俩字俩字，仨字仨字，伵字(zi)伵字(zi)地说话。
所以如果要问对新学编程有什么建议，那我要强调深入贯彻落实“三个多”：多写，多查，多试。
绝大多数人觉得编程难无非就是没有做到上面三点。尤其是没有建立起去查，去试的习惯。

关于多写，什么多写能积累经验，能巩固知识之类的老生常谈我就不多说了。
我发现有的朋友对自己的能力有不必要的谦虚，对自己要完成的任务也有不必要的敬畏。
他们经常会觉得：“啊，这个问题我不会做。”其实也有道理，还没学到这里，等学完来再来处理有什么问题呢。
但是编程不是这样！别抱有你以后会“学到这里”的这种天真的幻想！（想想我们之前说过的编程的特点）
所以对于大部分问题，你可能不会在未来的某一天通过学习自然的具有解决它的能力。
换句话说，在大部分问题上你都没办法合理的找这样的借口：“他比我专业啊，他学过那么久，他从业这么久……”
不要给自己这样的借口，觉得自己以后也会变得那么专业，也会能够信手拈来，到时候再来自信地解决这个对彼时的自己已经不值一提的问题。
你不会有这一天的，除非你现在硬着头皮开始写，不会有更简单的更轻松更温情的方式教会你怎么解决这个问题了。
你可能在幻想别人掌握了比你多得多的知识，这些知识发挥了主要作用。
但不是的，别人可能确实比你积累得多得多，但其中只有非常少的部分能在这个问题上发挥非常小的作用。
对于每个全新的问题，他的起点不比你高多少，不能说可以忽略不计，但是绝对可以克服。
所以你要么这么觉得：我完全不如别人聪明，我就是写不来程序，即便有那么多人写得来我也不行，我比他们中的每一个都蠢。
是的，不是因为你刚入门还缺乏积累，是因为你蠢，不是因为你没投入那么多精力，因为假以时日你也不会更高明。
如果你不这么认为，那么就请相信自己不是写不出来。
当然，你事实上确实觉得自己写不出来，这个感觉又不是虚构的，我们要尊重事实，有什么东西困住你了，虽然他“不该”能困住你。
你要相信，困住你的东西可以被你找出来，可以被你解决，可能会有各种意外，我不会说这很轻松，但他绝对没超过你的能力范畴。
总之，你也现在就可以开始找了。
其实如这个教程也是，跟着NOI-OJ做题是节奏很慢的。你可能觉得：啊？照着这个教程都能几天速成了还慢啊？
是的，还是很慢，从学习知识的角度来说，完全没有这么多知识值得你花这好几天来学。（加上我的注释可能会值得？）
但我仍然推荐你这样做，是因为，在这个过程中，你会有上百道并不困难的题来帮你培养自信。
在这些题目中，除了纯粹的语法问题，你应该不会有任何问题没法克服。所以请不要看到一道题先觉得自己不会做，毫无思路。
怎么可能，你肯定会。即便你不会做，也是“这道题我基本会，但我不熟悉语法，不过我应该只要搜一下xx就行。”
如果你执意认为你不会，完全没想法，那肯定是思想出了问题！
所以如果你不是一路完全依靠辅助工具过来，而是自己努力思考了，你应该能在上百个成功案例中建立起这样的自信：
“我会写程序！”
希望这种自信能让你拿到新问题都愿意开始写，而不是觉得“等我学到了再说吧，我还不会呢。”。

关于多查，我们之前已经说了，没有任何一本书能教会你一门语言。因为如果他希望做到这一点，他一定会写成一本字典。
那么比起学习这本字典，更正确的做法是，把他摆在手边，需要用到的时候去查。并且把常用的顺便记下来。
而且，天哪，这本字典多厚都不为过。非如此不能涵盖所有读者可能关心的问题。
我们不可能真写一本这样的书。但好在，互联网天然就是这样一本书。
以及，现在是好时代了，以ChatGPT为代表的大语言模型也是这样一本书。
但是使用他们对从来没接触过这种学习方法的人是一种很大的挑战。很多人其实是没有良好的搜索习惯的。
搜索和给ChatGPT写prompt一样，都是一门值得研究的技能。而不是仅仅说，我知道怎么用百度，我知道怎么用ChatGPT就可以的。
在什么时候可以搜索，搜索什么关键词，用什么方式辅助自己搜索，怎么把搜不到的问题转化成搜得到的问题。
对ChatGPT也是一样，怎么写prompt，有什么方法辅助自己写prompt，怎么把ChatGPT不擅长的问题转换成他擅长的问题。
都需要多思考，甚至多看教程也没有用，需要多思考和尝试。

至于多试，编程的尝试成本非常低，而且你可以很轻易地打印所有的相关信息。
这说起来完全是一文不值的废话，但很多人到了执行的时候就忘了。
有的知识是更适合查的，有的是更适合试的。比如你完全不知道怎么用的时候，可能适合去查，
但是如果问题是“能不能这样用”，尤其是一些不那么符合直觉的用法，或者你知道怎么查的时候，为什么不去试一下呢。
到了debug的时候，试更是尤其关键。很多人到了这个阶段就漫无目的地百度，百度不出来就问别人/ChatGPT。
但就是不去调试一下。有的时候真的只是需要在程序中间插入几个打印语句，把自己关心的变量打印出来。
看一下这个变量从哪一步开始不符合自己的预期，就能找到问题所在。
这不仅仅是伸手党的问题，我其实不怎么讨厌伸手党，而是这确实是很重要的能力。
很多时候如果你没有试过，没有养成试的思路，你甚至在问的时候都没办法描述好你的问题。

总之，学习编程最好的办法就是，拿着一本薄薄的语法字典（最厚不要超过《菜鸟教程》），开始做题或者直接上手做工程。
然后自己去查或者去试每一个想要弄得更清楚的地方，每一个自己需要用到，字典里又没有提到的东西。
总之，本教程虽然写了相当多注释，但这些注释里面很少会讲我觉得很容易搜到的东西。几乎不会详细讲任何一道题怎么做。
甚至我提供的答案可能根本是很反常规，没人会写的写法（为了拓展大家的思路）。
这是因为我觉得最基本的语法和题目最常规的实现方法不需要我多讲，实在是太容易搜到了。
所以别抱怨我什么都没讲了，去搜吧！
