这里是一些我对编程学习的整体性建议，和一些相关的人生感悟，其实完全可以不看。
（update：我最近在组会做了一个报告，其中一部分内容是介绍如何编程，因此我重新整理了这部分内容，或许变得虽然废话很多但值得一看了。）
不过有一点很重要：如果有任何问题，可以直接在issue提交。如果认识我本人，欢迎随时用各种渠道直接问我。
（不过我未必能回答得很好，这就是另一件事了）
不用担心打扰，只要我还活着，我很乐意，很想回答你们的每一个问题。

1.（节选改编自我某一天的日记？）
凌晨十二点多，从地铁站跑回学校的路上被一对中年夫妇拦下来了。

他们看起来年纪很大，妈妈拖着行李箱，爸爸推着共享单车，单车上载着几岁大的孩子。他们问我XX怎么走，是这个方向吗。

老实说我不知道这个地方，所以用导航查了一下。然后指着面前说，是的，就是这个方向直走。
我看了看他们风尘仆仆的样子，补充道：还有两公里。他们笑着说，谢谢你啊，是这个方向就行，我们怕走反了。

这个时候已经很晚了，地方也很偏僻，路上没有一个行人，也肯定找不到公交车。
最大的可能性是他们是坐地铁到了二号线的终点站，这样一算他们也已经沿路走了二十分钟了。
我相信他们在出发的时候肯定是有把握的，绝不是漫无目的地找了这么远。要么是问了别人，要么是他们会用导航。
我也相信沿着主干道一直走不是一条难记的路线。但也许是半夜，昏昏欲睡的孩子让他们承担不起走错的代价。
也许是因为目的地实在太远，走了这么久，连出现在地平线上的迹象都没有。
他们还是一点点变得手足无措，东张西望，好不容易才拦到了一个可以帮他们指路的人。

我又想起来早两年遇到的另一件事，一辆装满西瓜的拖车停在路边，壮年的儿子站在车上负责挑瓜和把瓜递下来，年迈的父亲负责上秤收钱。
他们用的是电子秤，由于只卖一种瓜，早就已经把价格设置好，把西瓜往上一摆，左边的窗口显示重量，右边的窗口显示价格。
但是每卖一个瓜，父亲都要喊自己的儿子，问他是不是收这么多钱。儿子则从车上跳下来，看一眼，然后说：是的。
然后再爬回车上接着挑下一个。

人真的好脆弱，脆弱到没办法相信自己的判断，没办法相信自己的理解。
哪怕是像有没有走反，电子秤的示数这样再简单明白不过的问题，也需要反复确认。
甚至自己确认都没有用，要找一个比自己更值得信任得多的人来确认。

以上就是我当天写的全部内容。我觉得学习编程也是这样，编程其实是一个很多人刚开始学的时候都觉得很难，
但是等到入门以后会百思不得其解当年为什么会觉得这个东西难的东西。（至少难点完全不在一开始感到难的地方）
大部分时候我们的主要障碍可能其实是缺乏信念。人太容易缺乏信念了，尤其是在一个完全陌生，又看起来好像很厉害的领域。
而一旦缺乏信念就会采取全面保守的姿态，变得连电子秤都不会看了。
我知道只是这样说没什么用，但是自信一点吧，至少达到完成本教程的程度，绝大多数人应该是轻轻松松。


2.（引用自1.1.1）
如果要问对新学编程有什么建议，那我有三条想说：学的时候多写，不会的时候多查，不理解的时候多试。
绝大多数人觉得编程难无非就是没有做到上面三点。尤其是没有建立起去查，去试的习惯。
很多刚学编程的人寄希望于有一个教程，或者一个网课能解决他们的问题，这多半是会失败的。
编程是一个无比庞大的系统，他太复杂了，以至于即便一本教程再厚，也远远不足以涵盖所有读者可能关心的问题。
所以读者经常会一边抱怨这本书怎么什么傻逼玩意都讲，一边又抱怨怎么什么都没讲清楚。
大部分人在学习编程的初级阶段，对编程的理解都其实是基于一系列的巧合和直觉上的。
这些直觉和巧合当然有时候会失效，但是为了这种风险去把教程编写的又大又全，代价太大了。
所以我和许多在编程方面有所建树的朋友（他们中有不少如今在大厂工作），基本达成了共识——
学习编程最好的办法就是，拿着一本薄薄的语法字典（最厚不要超过《菜鸟教程》），开始做题或者直接上手做工程。
然后自己去搜每一个想要弄得更清楚的地方，每一个自己需要用到，字典里又没有提到的东西。
总之，本教程几乎不会讲我觉得很容易搜到的东西，所以别抱怨我什么都没讲了，去搜吧！
而且，现在我们迎来了好时代！chatGPT会帮到你的。我发自内心的觉得每个人都值得好好学习怎么用chatGPT。


3.（引用自1.4.3）
我有一些可能和编程不那么紧密相关的肺腑之言想说：
大家可能遇到过一些刚刚入门形式逻辑的魔怔人（只是因为我最近才遇到了这样的人，我向我没有提到的其他学科的魔怔人道歉）
他可能每天会高强度地把真假挂在嘴边——比如他会说：当你抽卡为真的时候，你抽到SSR为真的概率
如果他还习惯用英文，你会听到满嘴的is true，is false。
我认为这是非常好的。

认知科学对儿童语言习得的研究中有提到“快速映射”（fast mapping）和“过度推广”（overextension）现象。
“快速映射”是说儿童在还没有完全理解一个词汇的时候就能够通过上下文提示和联想来进行快速映射，并在对词语含义仍有疑惑的时候就开始积极使用它。
“过度推广”则是说明了儿童在刚学会一个词汇/概念的时候可能会推广到各种不准确的情景。例如学会了词汇“狗”之后，他们可能错误的用它来称呼所有四条腿的动物。

为什么说是儿童语言习得呢，因为研究莫不指出，这些现象有明显的龄段差异，随着年龄增长，这些现象将会消失。

而与此同时，大家也应该听说过一个流传很广的理论——“关键期假说”，就是说人类在幼年时期对学习新语言有独特的优势.
认同这一理论的包括Chomsky在1965年首版的，鼎鼎大名的巨作——在谷歌学术有48000+引用的Aspects of the Theory of Syntax。
还有Lenneberg在1967年发表的The biological foundations of language，奠定关键期假设的核心论文，同样有15000+引用。

说实话，这几乎是不需要证明的事情，人人都在小时候看起来很轻松地掌握了第一语言，而在学习第二语言的过程中却倍感折磨。
我妈肯定没看过这些文章，但她也早在公众号还没有满天飞的年代就虔诚地相信事实肯定如此。

但也有一些文章持有相反的意见，例如SM Ervin-Tripp在1974年发表Is second language learning like the first反驳了这种观点。
例如Stephen Krashen先后发表了一系列关于第二语言习得的论文和著作（真的有一大堆）
他们都通过实验努力地证明，其实第二语言和第一语言没有区别，也没有所谓的“关键期”，随着年龄的增长语言学习能力不但没有下降，反而更上一层楼了。

那到底是什么阻止了我们学习第二语言，或者是什么别的东西？可能正是因为我们不再像小朋友那样还来不及掌握就迫不及待地尝试，甚至不惜闹出各种笑话。
可能是因为作为幼儿的我们正是在大量的输入和反馈中，在一次次的错误使用中，我们得以迅速收敛到一个词真正的含义和适用范围。
但是随着年龄的增长，我们周边的环境，乃至我们自己，都对我们太苛刻了。没有人会耐心地，一次次地纠正我们——取而代之的可能是冷嘲热讽。
我们自己也会难以忍受一直犯错的自己，我们会觉得给别人带来麻烦，感觉自己很丢人，感觉自己令人失望……
”你能不能自己先想，想清楚了再来问“”你能不能少问点这种没价值的问题“”你能不能少犯点这种稍微动点脑就能避免的错“”但凡你学的时候用点心都不会这个时候来问这个“
我想这说不定是人不得不承受的痛苦。我也不过是一边同情着别人，一边每天都在给别人施加这样的压力。For shame！For shame！
但是还好编译器，OJ不会嘲笑我们。虽然他们也不会纠正我们，但是他们真的只是轻描淡写地告诉我们我们错了，仅此而已。
就算是再幼稚，再不值得犯的错误也不会引起一丝额外的语气。
所以我真的希望趁此机会，在屏幕面前，我们也能久违的对自己更宽容一些。像一个儿童一样去积极地快速映射，去过度推广。
积极地在每个觉得可能能用的地方去试着用，哪怕会不合时宜，把简单易读的程序变得又臭又长，哪怕会犯错。
就像我们现在正在探索能不能把一个普通的表达式当作布尔表达式用一样。
你还可以去探索所有其他的东西能不能当条件，当然你会经常“过度推广”了，但是没关系，只有编译器知道。
作为一个例子：比如你可以尝试拿赋值语句a=b当条件——Python不行，但是有的语言真的可以。
但是Python3.8之后的版本引入了海象运算符，a:=b，它也有赋值功能，而且真可以当条件。
如果你真的试了一下if a=b，而且用的是pycharm，他甚至会在错误报告里问你是不是想用==或者:=。

希望你能做回那个充满兴趣，又充满自信的孩子。希望我，其他人，可能还有你自己，会支持你。
