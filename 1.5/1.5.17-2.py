import math

n = int(input())
Fibonacci = ((1 + math.sqrt(5)) ** n - (1 - math.sqrt(5)) ** n) / (2 ** n * math.sqrt(5))
print(int(Fibonacci))

"""
第二个方式更简单，通项公式法。
推荐一个网站：OEIS，直接百度能搜到。是一个非常全的数列网站，你可以在上面搜索到你想要找到的数列，并获取他的相关信息(包括相关研究论文)。
要不现在就动手试试？
当然，通项公式也是在上面找到的。
这个方法的时间复杂度为O(log2(n))（因为通项公式中有n次幂，在快速幂算法中，n次幂运算的时间复杂度是log2(n)）
如果按照1.4.13希望你做的——用循环乘法来做幂运算，时间复杂度将会是O(n)。不过python当然会尽量把**优化，肯定不会用循环实现。
空间复杂度为O(1)
"""