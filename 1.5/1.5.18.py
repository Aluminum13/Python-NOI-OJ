number_group = int(input())
number_case, number_improved = input().split()
percent_control_group = int(number_improved) / int(number_case) * 100
for i in range(number_group - 1):
    number_case, number_improved = input().split()
    percent_experimental_group = int(number_improved) / int(number_case) * 100
    if percent_experimental_group - percent_control_group > 5:
        print("better")
    elif percent_experimental_group - percent_control_group < -5:
        print("worse")
    else:
        print("same")

"""
这道题中我在变量名中就包含了每个变量的含义。并且把处理实验组和对照组的部分分开了。
这是为了提示大家从现在开始可以考虑和注意一些不影响程序逻辑的格式问题（虽然我自己不一定会在后面的程序中注意）
首先是在程序比较短的情况下，使用单个字母或者较短的组合来表示变量可能会更方便，甚至更容易看，
但是当程序足够长，涉及变量足够多的时候，最好是能清晰地了解每个变量是干什么的，避免你刚写完的程序自己就看不懂了。
变量名可以充分长，格式也相对自由，但一般来说有以下几点需要注意：
1.注意避开“保留字”（简单来说就是python自己要用的，不许你用的字），比如不要把你的函数命名为if, else, for, in之类的。
你可能会说什么傻逼会把函数命名为这些啊，你提醒了个寂寞。那我还可以随手给你举例一个可能用到的：lambda（即λ）也是保留字。
2.如果要用数字，不要把数字放在开头。你可以自己尝试如果不这样会发生什么。
3.尽可能避免和你可能用到的其他函数等冲突。
例如如果你要自定义一个函数，尽可能不要叫input。例如你import了time（导入了time库）就不要把任何一个变量名定义为time。
这不是绝对不行的，如果你深刻理解了它甚至可以巧妙利用，但这也可能会给你带来麻烦。
4.尽可能采用全小写英文字母和数字，用下划线来串联单词。
首先，python默认还是基于ASCII编码的，ASCII码表包含什么大家很容易可以查到。
他用一个8位二进制编码来编码字符，一共只有256个位置，可想而知是很紧张的，你可能会想用的中文，希腊字母，注音字母等等都不包括。
当然，你可以规定使用unicode（比如utf-8）。（有的环境不用手动规定也默认支持unicode）
但一个是这样每个字符更占空间（大部分时候这个优点微不足道），一个是可移植性会差一些，在不同的环境下可能遇到不兼容（虽然也总可以解决）。
如果只有你自己一个人维护，当然是自己开心最重要。如果要多人共同维护，基于历史惯性，只使用英文是兼顾表意和方便的。
当然你也可以觉得这种不方便不是你的问题，错的是这个不默认支持unicode的世界。
你就要狠狠拷打，坚持用ASCII码表以外的字符，不惯着任何一个不兼容unicode的环境。
我原则上是支持你的。不过我自己已经适应了现有规范并且没有觉得有什么不方便，所以自己没有推动这种革命的动力了（）。
然后，你可能会问，那ASCII也支持大写字母，为什么不利用呢？
因为在python中有三个比较常用的需要命名的东西——变量，函数（方法）和类。当然目前你可能接触变量是最多的。
所以大家形成的命名惯例也起到了区分这些东西的作用。会对这三类东西采用不同的命名策略，以便让人能够从变量名一眼区分他们。
比如可能会对“类”使用大驼峰命名法，NumberGroup(每个单词/逻辑部分的首字母大写)，比如可能会对函数使用小驼峰命名法，numberGroup（首字母不大写）。
当然这种规范也不是绝对的，他毕竟是惯例，所以和你所处的社区很有关系。你甚至可以在你自己的社区里主导形成自己的惯例。
而如果你想尽可能和全世界接轨，可以尝试参考PEP（比如PEP8规范）
不过更大的可能性是，当你和PEP8接轨以后，你会发现虽然你会在所有人那里都看到PEP的影子，
但是所有人都在自由地和PEP8接轨他们想接轨的一部分，而在其他部分则完全不接轨（乐
大家想必也从小到大见惯了各种“村规”，尤其是各类桌游都是村规重灾区。
所以第4条虽然我花了很多时间解释，但你完全可以不听，又不影响使用，开心就好。

当然，这件事也完全可以根据自己的习惯。比如我把表示组数的变量名定义为number_group。
但如果你是语法小警察，可能会写作number_of_group。
如果你深谙流行文化，可能会写作num_group
如果你搞数学，可能会写作n_group。
如果你搞物理，可能会写作n_g，甚至是n或者N。

说完了变量名，再简单说一下空行问题。你可以自由地在不同的段落（怎么分段也看你自己）之间用若干个空行分割。
这可能会帮助你在阅读的时候更清楚地理清程序逻辑。
比较常用的可能是空一行和空两行。就像写文章一样分段和分章节。
PEP中也规定了一些建议空行的情况，可供参考。
"""
